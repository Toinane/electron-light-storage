const fs=require("fs"),path=require("path"),electron=require("electron");function deepMergeObject(...t){const e=t=>t&&"object"==typeof t;return t.reduce((t,s)=>(Object.keys(s).forEach(r=>{const i=t[r],o=s[r];Array.isArray(i)&&Array.isArray(o)?t[r]=i.concat(...o):e(i)&&e(o)?t[r]=deepMergeObject(i,o):t[r]=o}),t),{})}class ElectronLightStorage{constructor(){this.defaultPath=(electron.app||electron.remote.app).getPath("userData"),this.filePath=this.defaultPath+path.sep+"storage.json",this.defaultStore={},this.store={},fs.existsSync(this.defaultPath)||fs.mkdirSync(this.defaultPath),fs.existsSync(this.filePath)?this.get():this.set(this.defaultStore)}set(t){if("object"!=typeof t)throw new TypeError("Excepted `store` to be of type `object`, got "+typeof t);if(Array.isArray(t))throw new TypeError("Excepted `store` to be of type `object`, got array");return this.store=deepMergeObject(this.store,t),fs.writeFileSync(this.filePath,JSON.stringify(this.store),"utf8"),this.store}get(t){return this.store.length||(fs.existsSync(this.filePath)?this.store=JSON.parse(fs.readFileSync(this.filePath,"utf8")):this.store=this.defaultStore),t?this.store[t]||this.defaultStore:this.store}reset(){return this.store=this.defaultStore,fs.existsSync(this.filePath)&&fs.unlinkSync(this.filePath),this.store}}module.exports=ElectronLightStorage;
